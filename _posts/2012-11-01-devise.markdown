---
layout: page
title: Adicionando Autenticação com Devise
permalink: devise
previous-link: thumbnails
next-link: gravatar
---

# Adicionando Autenticação com Devise

*Criado por Piotr Steininger, [@polishprince](https://twitter.com/polishprince)*

*Atualizado por Ernesto Jimenez, [@ernesto_jimenez](https://twitter.com/ernesto_jimenez)*

**Este tutorial assume que você já criou a aplicação Rails Girls seguindo** [**o tutorial de desenvolvimento de aplicação**](/app).


## *1.*Adicione a gem devise


Abra o seu `Gemfile` e adicione a seguinte linha

{% highlight ruby %}
gem 'devise'
{% endhighlight %}
Depois, execute o seguinte comando no terminal
{% highlight sh %}
bundle install
{% endhighlight %}
para instalar a gem. **Lembre-se de dar restart no servidor Rails**.

## *2.*Configurando o devise na saua aplicação

Execute o seguinte comando no terminal.

{% highlight sh %}
rails g devise:install
{% endhighlight %}


## *3.*Configure Devise
## *3.*Configurando Devise

Certifique-se que você tenha definido uma opção de url padrão nos seus arquivos de ambiente. Abra `config/environments/development.rb` e adicione esta linha:
{% highlight ruby %}
   config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
{% endhighlight %}

anes da palavra chave `end`.

Abra `app/views/layouts/application.html.erb` e adicione:

{% highlight erb %}
<% if notice %>
  <p class="alert alert-success"><%= notice %></p>
<% end %>
<% if alert %>
  <p class="alert alert-danger"><%= alert %></p>
<% end %>
{% endhighlight %}
logo acima de
{% highlight ruby %}
   <%= yield %>
{% endhighlight %}

Abra `app/views/ideas/show.html.erb` e remova a linha que diz:

{% highlight erb %}
<p id="notice"><%= notice %></p>
{% endhighlight %}

Faça o mesmo em `app/views/comments/show.html.erb`. Estas linhas não são mais necessárias agora que colocamos o _notice_ no arquivo `app/views/layouts/application.html.erb`.

## *4.*Setup the User model
## *4.*Configure o modelo de Usuário

Nós utilizaremos um script gerador para criar o modelo User.
{% highlight sh %}
   rails g devise user
   rake db:migrate
{% endhighlight %}

**Treinador:** Explicar o que é o modelo de usuários que foi criado. O que são esses campos?

## *5.*Crie o seu primeiro usuário

Agora que você configurou tudo, podemos criar o nosso primeiro usuário. O Devise cria todo o código e rotas necessárias para criar novas contas, efeturar log in, log out, etc.

Certifique-se de que o seu servidor rails está rodando, abra [http://localhost:3000/users/sign_up](http://localhost:3000/users/sign_up) e crie a sua primeira conta de usuário.

## *6.*Adicione os links para cadastro e login

Tudo que precisamos fazer agora é adicionar os links e avisos apropriados no canto direito da barra de navegação para o usuário que realizou o login

Para isso, edite `app/views/layouts/application.html.erb` e adicione:
{% highlight erb %}
<p class="navbar-text pull-right">
<% if user_signed_in? %>
  Logged in as <strong><%= current_user.email %></strong>.
  <%= link_to 'Edit profile', edit_user_registration_path, :class => 'navbar-link' %> |
  <%= link_to "Logout", destroy_user_session_path, method: :delete, :class => 'navbar-link'  %>
<% else %>
  <%= link_to "Sign up", new_user_registration_path, :class => 'navbar-link'  %> |
  <%= link_to "Login", new_user_session_path, :class => 'navbar-link'  %>
<% end %>
{% endhighlight %}
logo depois de
{% highlight erb %}
<ul class="nav">
  <li class="active"><a href="/ideas">Ideas</a></li>
</ul>
{% endhighlight %}

Finalmente, redirecione o usuário para a página de login se ele não estiver logado. Abra `app/controllers/application_controller.rb` e adicione:

{% highlight ruby %}
  before_action :authenticate_user!
{% endhighlight %}

depois de `protect_from_forgery with: :exception`.

Abra o seu navegador e tente realizar login e logout.

**Coach:** Talk about the `user_signed_in?` and `current_user` helpers. Why are they useful?
**Treinador:** Fale sobre os _helpers_ `user_signed_in?` e `current_user`. Por que eles são úteis?

## O que vem agora?

* Add extra fields to the User model
* Add relationships between users and ideas
* Restrict users to only be able to edit their own ideas and delete their own comments
* Expand to use roles or permissions (use one of the popular authorization gem like CanCan)

* Adicione campos extras no modelo User
* Adicione relacionamentos entre usuários e ideias
* Permitir que usuários editem somente as suas próprias ideias e delete seus próprios comentários
* Expandir as regras de usuários ou permissões (utilizando uma das gems mais populares de autorização, como o CanCan).
