---
layout: page
title: Tutorial de Aplicação Rails Girls
permalink: app
previous-link: instalacao
next-link: github
---

# Tutorial de Aplicação Rails Girls

*Criado por Vesa Vänskä, [@vesan](https://twitter.com/vesan)*

**Certifique-se de que você tem o Rails instalado!** [**Siga o guia**](/instalacao) para instalar.


## Conheça as ferramentas

<div class="indent" markdown="1">

<h3><i class="icon-text-editor">&nbsp;</i></h3>

### Text Editor

* [Atom](https://atom.io/), [Sublime Text](http://www.sublimetext.com),  Vim e Emacs são examplos de editores de texto que você pode usar para escrever código e editar arquivos.

<h3><i class="icon-prompt">&nbsp;</i></h3>

### Terminal (conhecido como Prompt de Comando no Windows)

* É onde você inicia o servidor Rails e executa comandos.

<h3><i class="icon-browser">&nbsp;</i></h3>

### Navegadores

* [Firefox](https://www.mozilla.org/pt-BR/firefox/new/), [Safari](http://www.apple.com/br/safari/), [Chrome](https://www.google.com/chrome/browser/desktop/index.html) para visualizar sua aplicação.

</div>

### Importante

É importante que você selecione e siga instruções específicas para o seu sistema operacional - os comandos que você precisa executar em um computador com Windows são um pouquinho diferentes daqueles que você usaria em um Mac ou em um computador com Linux. Se você tiver alguma dúvida em relação a isso, verifique o seletor de Sistema Operacional logo abaixo dos comandos. Caso você esteja utilizando um serviço de nuvem (Nitrous, por exemplo), você precisa executar os comandos para Linux mesmo que seu computador use Windows.

## *1.*Criando a aplicação

Nós vamos criar uma nova aplicação Rails chamada *railsgirls*.

Primeiro, vamos abrir uma janela do terminal:

* Mac OS X: Abra a busca Spotlight, digite *Terminal* e clique no aplicativo *Terminal*.
* Windows: Clique em Iniciar (Start) e procure por *Prompt de Comando (Command Prompt)*, então clique  *Command Prompt with Ruby on Rails*.
* Linux (Ubuntu/Fedora): Procure por *Terminal* no dash e clique em *Terminal*.
* Serviço de nuvem (Nitrous, entre outros): Faça login na sua conta, inicie seu projeto e mude para a respectiva IDE (veja o [guia de instalação](/install#using-a-cloud-service) para maiores detalhes). O terminal geralmente está na parte de baixo da janela do seu naveador.

Depois, digite os seguintes comandos no terminal:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
<p>Você pode verificar que um diretório com o nome de <code>projects</code> foi criado executando o comando: <code>ls</code>. Você deve ver o diretório <code>projects</code> listado. Agora, você deve mudar o diretório no qual você se encontra para a pasta <code>projects</code> executando o comando:</p>
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
<p>Você pode verificar que agora você está em um diretório vazio. Para fazer isso, execute o comando <code>ls</code>. Agora, você criará uma nova aplicação chamada <code>railsgirls</code> executando o seguinte comando:</p>
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
<p>Isso criará uma nova aplicação dentro da pasta <code>railsgirls</code>, então novamente nós queremos mudar de diretório, entrando no diretório da nossa aplicação Rails. Faremos isso executando o seguinte comando:</p>
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
<p>Se você executar o comando <code>ls</code> dentro deste diretório, você verá pastas como, por exemplo, <code>app</code> e <code>config</code>. Agora você pode iniciar o servidor Rails executando o comando:</p>
    </div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>

<p>Você pode verificar que um diretório com o nome de <code>projects</code> foi criado executando o comando: <code>dir</code>. Você deve ver o diretório <code>projects</code> listado. Agora, você deve mudar o diretório no qual você se encontra para a pasta <code>projects</code> executando o comando:</p>

    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>

    <p>Você pode verificar que agora você está em um diretório vazio. Para fazer isso, execute o comando <code>dir</code>. Agora, você criará uma nova aplicação chamada <code>railsgirls</code> executando o seguinte comando:</p>


    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
    <p>Isso criará uma nova aplicação dentro da pasta <code>railsgirls</code>, então novamente nós queremos mudar de diretório, entrando no diretório da nossa aplicação Rails. Faremos isso executando o seguinte comando:</p>

    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
    <p>Se você executar o comando <code>dir</code> dentro deste diretório, você verá pastas como, por exemplo, <code>app</code> e <code>config</code>. Agora você pode iniciar o servidor Rails executando o comando:</p>

    </div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>
</div>

Abra a URL <http://localhost:3000> no seu navegador. Se você estiver usndo um serviço de nuvem (Nitrous, por ex.), use sua funcionalidade de pré-visualização (veja o [guia de instalação](/install#using-a-cloud-service) para maiores detalhes).

Você deverá ver uma página "Welcome aboard", o que significa que a criação da sua nova aplicação funcionou direitinho.

Note que nesta janela o prompt de comando não está visível porque você está agora no servidor Rails, o prompt de comando se parece com isso:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
$
{% endhighlight %}
  </div>
  <div class="win">
{% highlight sh %}
>
{% endhighlight %}
  </div>
</div>

Quando o prompt de comando não está visível, você não pode executar novos comandos. Se você tentar executar 'cd' ou outro comando, não funcionará. Para retornar ao prompt normal:

Pressione <kbd>Ctrl</kbd>+<kbd>C</kbd> na janela do terminal para encerrar o servidor.

**Treinadores:** Expliquem o que cada comando faz. O que foi gerado? O que o servidor faz?


## *2.*Crie o scaffold para Ideias

Nós vamos usar a funcionalidade de scaffold do Rails para gerar um ponto de partida que nos permita listar, adicionar, remover, editar e visualizar coisas; no nosso caso, ideias.

**Treinadores:** O que é o scaffolding do Rails? Explique o comando, o modelo, o nome do modelo e a tabela do banco de dados relacionada a ele, convenções de nomes, atributos e tipos, etc. O que são as migrações e por que você precisa delas?

{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
{% endhighlight %}

O scaffold cria os novos arquivos no diretório do seu projeto, mas para que isso funcione nós precisamos executar alguns outros comandos para atualizar nosso banco de dados e reiniciar o servidor.

{% highlight sh %}
rake db:migrate
rails server
{% endhighlight %}

Abra a URL <http://localhost:3000/ideas> no seu navegador. Usuários de serviços na nuvem (Nitrous, por ex.) devem acrescentar '/ideas' à URL de pré-visualização (veja o [guia de instalação](/instalacao#usando-um-servio-de-nuvem)).

Clique por aí e teste o que você obtém ao executar estes poucos comandos.

## *3.*Design

**Treinadores:** Fale sobre a relação entre HTML e Rails. Que parte das views é HTML e que parte é Ruby Embutido (ERB)? O que é MVC e como isso se relaciona? (Models e controllers são responsáveis por gerar as views em HTML.)

A aplicação ainda não está bonita. Vamos fazer algo em relação a isso! Nós usaremos o Twitter Bootstrap para nos ajudar a deixar as coisas mais bonitas facilmente.

No seu editor de texto, abra o arquivo `app/views/layouts/application.html.erb` e acima da linha

{% highlight erb %}
<%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
{% endhighlight %}

adicione

{% highlight erb %}
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.css">
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap-theme.css">
{% endhighlight %}

e substitua

{% highlight erb %}
<%= yield %>
{% endhighlight %}

por

{% highlight erb %}
<div class="container">
  <%= yield %>
</div>
{% endhighlight %}

Também vamos adicionar uma barra de navegação e um rodapé ao layout. No mesmo arquivo, abaixo de `<body>` adicione

{% highlight html %}
<nav class="navbar navbar-default navbar-fixed-top" role="navigation">
  <div class="container">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/">Ideias App</a>
    </div>
    <div class="collapse navbar-collapse">
      <ul class="nav navbar-nav">
        <li class="active"><a href="/ideas">Ideias</a></li>
      </ul>
    </div>
  </div>
</nav>
{% endhighlight %}

e antes de `</body>` adicione

{% highlight html %}
<footer>
  <div class="container">
    Rails Girls 2016
  </div>
</footer>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.js"></script>
{% endhighlight %}

Agora, vamos mudar também a cara da tabela de ideias. Abra o arquivo `app/assets/stylesheets/application.css` e no final adicione

{% highlight css %}
body { padding-top: 100px; }
footer { margin-top: 100px; }
table, td, th { vertical-align: middle; border: none; }
th { border-bottom: 1px solid #DDD; }
{% endhighlight %}

Certifique-se que você salvou seus arquivos e recarregue a janela do navegador para ver as mudanças. Você pode modificar ainda mais o HTML e o CSS.

Caso sua janela do Terminal mostre uma mensagem de erro que *meio que* sugere que algo está errado com seu JavaScript ou CoffeeScript, instale o [nodejs](http://nodejs.org/download/). Esse problema não deve acontecer caso você tenha utilizado o RailsInstaller (e sim quando você instalou o Rails via ```gem install rails```).

**Treinadores:** Falem um pouco sobre CSS e layouts.

## *4.*Adicionando upload de imagens

Precisamos instalar um pequeno software que nos permita fazer o upload de arquivos no Rails.

Abra o arquivo `Gemfile` no diretório do projeto utilizando o seu editor de textos e abaixo da linha

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

adicione

{% highlight ruby %}
gem 'carrierwave'
{% endhighlight %}

**Treinadores:** Expliquem o que são as bibliotecas (libraries) e porque elas são úteis. Descrevam o que é o software de código aberto (open source).

Pressione <kbd>Ctrl</kbd>+<kbd>C</kbd> na janela do terminal para encerrar o servidor.

No terminal, execute:

{% highlight sh %}
bundle
{% endhighlight %}

Agora nós poderemos gerar o código para gerenciar uploads. No terminal, execute:

{% highlight sh %}
rails generate uploader Picture
{% endhighlight %}

Por favor, inicie o servidor Rails agora.

Nota: Algumas pessoas talvez estejam usando uma segunda janela do terminal para executar o servidor Rails continuamente. Neste caso, você precisa **reiniciar o processo do servidor Rails** agora. Isso é necessário para que a aplicação carregue a biblioteca recém-adicionada.

Abra o arquivo `app/models/idea.rb` e abaixo da linha

{% highlight ruby %}
class Idea < ApplicationRecord
{% endhighlight %}

adicione

{% highlight ruby %}
mount_uploader :picture, PictureUploader
{% endhighlight %}

Abra o arquivo `app/views/ideas/_form.html.erb` e modifique

{% highlight erb %}
<%= f.text_field :picture %>
{% endhighlight %}

para

{% highlight erb %}
<%= f.file_field :picture %>
{% endhighlight %}

Às vezes, você pode obter um erro assim: *TypeError: can't cast ActionDispatch::Http::UploadedFile to string*.

Se isso acontecer, no arquivo `app/views/ideas/_form.html.erb` modifique a linha

{% highlight erb %}
<%= form_for(idea) do |f| %>
{% endhighlight %}

para

{% highlight erb %}
<%= form_for(idea, html: {multipart: true}) do |f| %>
{% endhighlight %}

No seu navegador, adicione uma nova ideia (idea) com uma imagem. Quando você fizer o upload da imagem, não vai estar bonito porque só mostrará o caminho para o arquivo. Vamos ajeitar isso!

Abra o arquivo `app/views/ideas/show.html.erb` e modifique

{% highlight erb %}
<%= @idea.picture %>
{% endhighlight %}

para

{% highlight erb %}
<%= image_tag(@idea.picture_url, width: 600) if @idea.picture.present? %>
{% endhighlight %}

Agora, recarregue a janela do seu navegador para ver o que mudou.

**Treinadores:** Falem um pouco sobre HTML.

## *5.*Aperfeiçoando as rotas

Abra a URL <http://localhost:3000> (ou sua URL de pré-visualização no caso de utilizar um serviço na nuvem). Ela ainda mostra a página "Welcome aboard". Vamos fazer com que ela redirecione para a página que contém as ideias.

Abra o arquivo `config/routes.rb` e após a primeira linha, adicione

{% highlight ruby %}
root to: redirect('/ideas')
{% endhighlight %}

Teste a mudança abrindo o caminho raiz (ou seja, <http://localhost:3000/> ou sua URL de pré-visualização) no seu navegador.

**Treinadores:** Falem sobre rotas (routes) e incluam detalhes sobre a ordem das rotas e sua relação com arquivos estáticos.

## Crie uma página estática em sua aplicação

Vamos adicionar uma página estática à sua aplicação que conterá informações sobre sua autoria, ou seja, sobre você!

{% highlight sh %}
rails generate controller pages info
{% endhighlight %}

Este comando criará uma nova pasta sob `app/views` chamada `/pages` e sob ela um arquivo chamado `info.html.erb` que será sua página de informação.

O comando também adiciona uma rota simples ao seu arquivo routes.rb.

{% highlight ruby %}
get "pages/info"
{% endhighlight %}

Agora você pode abrir o arquivo `app/views/pages/info.html.erb` e adicionar as informações sobre você no HTML. Para ver sua nova página de informação, abra a URL <http://localhost:3000/pages/info> em seu navegador ou, caso esteja utilizando um serviço na nuvem, acrescente '/pages/info' à sua URL de pré-visualização.

## *6+.*O que vem agora?

* Acrescente design usando HTML &amp; CSS
* Acrescente classificações
* Use CoffeeScript (ou JavaScript) para adicionar interação
* Acrescente redimensionamento para fazer com que as imagens carreguem mais rápido


## Guias Adicionais (em inglês)

* Guide 0: [Handy cheatsheet for Ruby, Rails, console etc.](http://www.pragtob.info/rails-beginner-cheatsheet/)
* Guide 1: [Add commenting by Janika Liiv](/commenting)
* Guide 2: [Put your app online with Heroku by Terence Lee](/heroku) / [Put your app online with OpenShift by Katie Miller](/openshift) / [Put your app online with anynines](/anynines) / [Put your app online with Trucker.io](/trucker)
* Guide 3: [Create thumbnail images for the uploads by Miha Filej](/thumbnails)
* Guide 4: [Add design using HTML &amp; CSS by Alex Liao](/design)
* Guide 5: [Add Authentication (user accounts) with Devise by Piotr Steininger](/devise)
* Guide 6: [Adding profile pictures with Gravatar](/gravatar)
* Guide 7: [Test your app with RSpec](/testing-rspec)
* Guide 8: [Continuous Deployment with Travis-CI](/continuous-travis) / [Continuous Deployment with Codeship](/continuous) / [Continuous Deployment with Snap CI](/continuous-snap-ci)
* Guide 9: [Go through additional explanations for the App by Lucy Bain](https://github.com/lbain/railsgirls)
* Guide 10: [Adding a back-end with Active Admin](/backend-with-active-admin)
